@model ClinicalResearchApp.Models.UserResponse
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!--
    <title>Risk Tiers Calculator</title>
    -->
    
    <!-- Link to your custom styles.css file -->
    

    <!-- Link to Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

     <!-- Include jsPDF library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
   
    <!-- Include the jsPDF AutoTable plugin -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

    <!-- Additional custom styles specific to this page -->
  <style>
/* General Styles */
.form-section {
    margin-bottom: 20px;
}

.form-section label {
    font-weight: bold;
}

.section-title {
    margin-top: 30px;
    margin-bottom: 15px;
    font-weight: bold;
    font-size: 1.2em;
    text-decoration: underline;
}

/* Form Container */
.form-container {
    max-width: 90%;
    margin: 0 auto;
}

/* Ensure form-check elements are properly aligned */
.form-check {
    display: flex;
    align-items: center; /* Ensures vertical alignment */
    gap: 10px; /* Adds space between number, radio, and label */
}

/* Move numbering further to the left ONLY for Section 1A - 1D */
.section-1 .radio-number {
    font-weight: bold;
    font-size: 0.85em;
    margin-right: 40px; /* Ensures space between number & radio */
    min-width: 100px; /* Keeps consistent left alignment */
    flex-basis: 100px; /* Ensures uniform width */
    text-align: left; /* Aligns numbers properly */
    margin-top: 6px; /* Slightly moves numbers up */
}

/* Ensure radio button is correctly positioned ONLY for Section 1A - 1D */
.section-1 .form-check-input {
    order: 0; /* Ensures radio button stays between number & text */
    margin-right: 10px; /* Adds space between radio and label */
}

/* Ensure labels follow the radio buttons ONLY for Section 1A - 1D */
.section-1 .form-check-label {
    order: 1; /* Ensures label is always after the radio */
    margin-left: -105px;
    margin-top: 5px;
}

/* Ensure input fields take full width */
.form-container input,
.form-container select,
.form-container textarea {
    width: 100%;
    box-sizing: border-box;
}

/* Sticky note styles */
#risk-level-note {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: #0c3275;
    text-align: center;
    padding: 10px;
    font-size: 20px;
    font-weight: bold;
    color: rgb(255, 165, 0);
    z-index: 1000;
    white-space: nowrap;
    box-shadow: 0px 4px 6px rgba(25, 5, 110, 0.1);
}

/* Prevents content from being hidden behind the fixed bar */
body {
    margin-bottom: 40px;
}

/* Prevent margin shifts in Section E (ORA/JHURA) */
#ora-jhura-question .form-check-label {
    margin-left: 0px !important;
}

/* Prevent any changes to the Data Table */
#data-table .form-check-label {
    margin-left: 0px !important;
}
</style>

</head>
<body>
    <div class="container">
        <h1>Risk Tiers Calculator</h1>
        <!-- <form asp-action="Index" method="post"> -->
         <form   asp-action="SaveDataClassifications" asp-controller="Research" method="post">
            <div class="form-section">
                <label asp-for="RTCCompletionDate">RTC Completion Date</label>
                <input asp-for="RTCCompletionDate" class="form-control" type="date" />
                <span asp-validation-for="RTCCompletionDate" class="text-danger"></span>
            </div>
            <div class="form-section">
                <label asp-for="IRBApplicationNumber">IRB Application Number</label>
                <input asp-for="IRBApplicationNumber" class="form-control" />
                <span asp-validation-for="IRBApplicationNumber" class="text-danger"></span>
            </div>
            <div class="form-section">
                <label asp-for="StudyName">Study Name</label>
                <input asp-for="StudyName" class="form-control" />
                <span asp-validation-for="StudyName" class="text-danger"></span>
            </div>
            <div class="form-section">
                <label asp-for="PIFirstName">PI First Name</label>
                <input asp-for="PIFirstName" class="form-control" />
                <span asp-validation-for="PIFirstName" class="text-danger"></span>
            </div>
            <div class="form-section">
                <label asp-for="PILastName">PI Last Name</label>
                <input asp-for="PILastName" class="form-control" />
                <span asp-validation-for="PILastName" class="text-danger"></span>
            </div>
            <div class="form-section">
                <label asp-for="PIJHED">PI JHED</label>
                <input asp-for="PIJHED" class="form-control" />
                <span asp-validation-for="PIJHED" class="text-danger"></span>
            </div>
            <div class="form-section">
                <label asp-for="PIEmailAddress">PI Email Address</label>
                <input asp-for="PIEmailAddress" class="form-control" />
                <span asp-validation-for="PIEmailAddress" class="text-danger"></span>
            </div>
            <div class="form-section">
                <label asp-for="StudyContactFirstName">Study Contact First Name (optional)</label>
                <input asp-for="StudyContactFirstName" class="form-control" />
                <span asp-validation-for="StudyContactFirstName" class="text-danger"></span>
            </div>
            <div class="form-section">
                <label asp-for="StudyContactLastName">Study Contact Last Name (optional)</label>
                <input asp-for="StudyContactLastName" class="form-control" />
                <span asp-validation-for="StudyContactLastName" class="text-danger"></span>
            </div>
            <div class="form-section">
                <label asp-for="StudyContactJHED">Study Contact JHED (optional)</label>
                <input asp-for="StudyContactJHED" class="form-control" />
                <span asp-validation-for="StudyContactJHED" class="text-danger"></span>
            </div>
            <div class="form-section">
                <label asp-for="StudyContactEmailAddress">Study Contact Email Address (optional)</label>
                <input asp-for="StudyContactEmailAddress" class="form-control" />
                <span asp-validation-for="StudyContactEmailAddress" class="text-danger"></span>
            </div>
        
             <div class="section-title" style="color: red; text-align: center;">
    Section 1: Data Characteristics and Data Access  
    <br>  
    *All Questions 1A-1D must be completed to generate a PDF.*
</div>
<div class="section-1">
<!-- 1A -->
<div class="form-group">
    <label asp-for="InvolvesSensitiveHealthInfo">
        1A. My study will involve storage or use of sensitive health information (defined as Psychiatry, Psychology, or Substance Abuse notes or diagnoses, diagnoses or test results explicitly related to HIV,  
or whole exome/genome sequencing data).
        <span style="color: red; font-size: smaller;">&#42; Required</span>
    </label>
    <div class="form-check">
        <span class="radio-number">1.A.1</span>
        <input asp-for="InvolvesSensitiveHealthInfo" class="form-check-input" type="radio" value="true" id="InvolvesSensitiveHealthInfoYes" />
        <label class="form-check-label" for="InvolvesSensitiveHealthInfoYes">Yes</label>
    </div>
    <div class="form-check">
        <span class="radio-number">1.A.2</span>
        <input asp-for="InvolvesSensitiveHealthInfo" class="form-check-input" type="radio" value="false" id="InvolvesSensitiveHealthInfoNo" />
        <label class="form-check-label" for="InvolvesSensitiveHealthInfoNo">No</label>
    </div>
    <span asp-validation-for="InvolvesSensitiveHealthInfo" class="text-danger"></span>
</div>

<!-- 1B -->
<div class="form-group">
    <label asp-for="NumberOfPeopleOrRecords">
        1B. Number of people to be enrolled or records to be reviewed (largest applicable number).
        <span style="color: red; font-size: smaller;">&#42; Required</span>
    </label>
    <div class="form-check">
        <span class="radio-number">1.B.1</span>
        <input asp-for="NumberOfPeopleOrRecords" class="form-check-input" type="radio" value="0" id="NumberOfPeopleOrRecords1" />
        <label class="form-check-label" for="NumberOfPeopleOrRecords1">1-499</label>
    </div>
    <div class="form-check">
        <span class="radio-number">1.B.2</span>
        <input asp-for="NumberOfPeopleOrRecords" class="form-check-input" type="radio" value="1" id="NumberOfPeopleOrRecords2" />
        <label class="form-check-label" for="NumberOfPeopleOrRecords2">500-9,999</label>
    </div>
    <div class="form-check">
        <span class="radio-number">1.B.3</span>
        <input asp-for="NumberOfPeopleOrRecords" class="form-check-input" type="radio" value="2" id="NumberOfPeopleOrRecords3" />
        <label class="form-check-label" for="NumberOfPeopleOrRecords3">10,000 or more</label>
    </div>
    <span asp-validation-for="NumberOfPeopleOrRecords" class="text-danger"></span>
</div>

<!-- 1C -->
<div class="form-group">
    <label asp-for="HumanDataSharingLevel">
        1C. What (if any) human data will be copied, moved, or shared with, published, or viewable by people outside the 
        <a href="https://livejohnshopkins.sharepoint.com/sites/inside-privacy-office/SitePages/about-hipaa/Index.aspx?xsdata=MDV8MDJ8YnNoYXJtMTJAamhtaS5lZHV8ZWE0NTQwZTkyZTI4NDA3YmMyZGEwOGRkNTEyZDNkN2F8OWZhNGY0MzhiMWU2NDczYjgwM2Y4NmY4YWVkZjBkZWN8MHwwfDYzODc1NTk3Njk0NTkxMjI0NnxVbmtub3dufFRXRnBiR1pzYjNkOGV5SkZiWEIwZVUxaGNHa2lPblJ5ZFdVc0lsWWlPaUl3TGpBdU1EQXdNQ0lzSWxBaU9pSlhhVzR6TWlJc0lrRk9Jam9pVFdGcGJDSXNJbGRVSWpveWZRPT18MHx8fA%3d%3d&sdata=em5XL3hWSlhtbFhZdVpxc3h0OE1WQU9ERGs5WFYwUnFiVWdsUk90SEdxaz0%3d" 
           target="_blank">JHM Covered Entity</a>? 
        Consider collaboration and sharing with or as required by a sponsor or publisher. 
        See <a href="https://www.hopkinsmedicine.org/institutional-review-board/guidelines-policies/guidelines/levels-of-identification-of-data" target="_blank">Levels of Identification of Data</a> for information on responses.
        <span style="color: red; font-size: smaller;">&#42; Required</span>
    </label>
    <div class="form-check">
        <span class="radio-number">1.C.1</span>
        <input asp-for="HumanDataSharingLevel" class="form-check-input" type="radio" value="0" id="HumanDataSharingLevel1" />
        <label class="form-check-label" for="HumanDataSharingLevel1">Directly identifiable data</label>
    </div>
    <div class="form-check">
        <span class="radio-number">1.C.2</span>
        <input asp-for="HumanDataSharingLevel" class="form-check-input" type="radio" value="1" id="HumanDataSharingLevel2" />
        <label class="form-check-label" for="HumanDataSharingLevel2">LDS</label>
    </div>
    <div class="form-check">
        <span class="radio-number">1.C.3</span>
        <input asp-for="HumanDataSharingLevel" class="form-check-input" type="radio" value="2" id="HumanDataSharingLevel3" />
        <label class="form-check-label" for="HumanDataSharingLevel3">Person-level data with No PHI or PII as validated by a JHM certified honest broker</label>
    </div>
    <div class="form-check">
        <span class="radio-number">1.C.4</span>
        <input asp-for="HumanDataSharingLevel" class="form-check-input" type="radio" value="3" id="HumanDataSharingLevel4" />
        <label class="form-check-label" for="HumanDataSharingLevel4">Aggregate (counts)</label>
    </div>
    <div class="form-check">
        <span class="radio-number">1.C.5</span>
        <input asp-for="HumanDataSharingLevel" class="form-check-input" type="radio" value="4" id="HumanDataSharingLevel5" />
        <label class="form-check-label" for="HumanDataSharingLevel5">Data will not be copied, moved, or shared</label>
    </div>
    <span asp-validation-for="HumanDataSharingLevel" class="text-danger"></span>
</div>

<!-- 1D -->
<div class="form-group">
    <label asp-for="AllActivitiesCoveredByConsent">
        1D. Are all activities (including any use or disclosure) covered by consent?
        <span style="color: red; font-size: smaller;">&#42; Required</span>
    </label>
    <div class="form-check">
        <span class="radio-number">1.D.1</span>
        <input asp-for="AllActivitiesCoveredByConsent" class="form-check-input" type="radio" value="true" id="AllActivitiesCoveredByConsentYes" />
        <label class="form-check-label" for="AllActivitiesCoveredByConsentYes">Yes</label>
    </div>
    <div class="form-check">
        <span class="radio-number">1.D.2</span>
        <input asp-for="AllActivitiesCoveredByConsent" class="form-check-input" type="radio" value="false" id="AllActivitiesCoveredByConsentNo" />
        <label class="form-check-label" for="AllActivitiesCoveredByConsentNo">No</label>
    </div>
    <span asp-validation-for="AllActivitiesCoveredByConsent" class="text-danger"></span>
</div>
</div>
           
            <div class="section-title" style="color: red; text-align: center;">
    Section 2: Data Storage
</div>
<p style="text-align: center;"><strong>• In each of the 4 field groups below, indicate where data will be stored or analyzed (select all that apply).</strong></p>

            <div class="mt-5">
    <h2>Data Table</h2>
                <table class="table table-striped">
                   <thead>
    <tr>
        <th>Option</th>
        <th title="Text Protected Health Information" data-column="C1">Text PHI</th>
        <th title="Protected Health Information greater than a Limited Dataset" data-column="C2">PHI > LDS</th>
        <th title="Limited Dataset. See footnote 1 for definition." data-column="C3">LDS</th>
        <th title="Protected Health Information but no Personally Identifiable Information" data-column="C4">PII but no PHI</th>
        <th title="No Protected Health Information or Personally Identifiable Information" data-column="C5">No PHI/PII</th>
        <th title="Summary data in aggregate form" data-column="C6">Aggregate (Counts)</th>
        <th title="This option is not selected or applicable" data-column="C7">Not Used</th>
    </tr>
</thead>
        <tbody>
                        <!-- (P) Preferred Data Storage Options Section -->
        <tr>    
               <td colspan="8" style="font-weight: bold; text-align: left;">
                        (P) Preferred Data Storage Options - 
                        <a href="https://www.hopkinsmedicine.org/institutional-review-board/guidelines-policies/guidelines/levels-of-identification-of-data" target="_blank">
                        (Click here for more information on "Levels of Identification")
                        </a>
               </td>   
        </tr>
        <tr>
        <td>2.P.1 <a href="https://researchit.jhu.edu/safer/" target="_blank">SAFER</a> or <a href="https://researchit.jhu.edu/safer/" target="_blank">SAFE Desktop</a></td>
         
         @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
                {
                    <td>
                        <input type="radio" name="SAFERorSAFEDesktop" data-option="2.P.1" data-column="@column" value="@column"
                               @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.P.1" && dc.Selected) ? "checked" : "")
                               @(Model.DataClassifications.All(dc => dc.Option != "2.P.1") && column == "C7" ? "checked" : "") />
                    </td>
                }
        <tr>
        <td>2.P.2 <a href="https://ictr.johnshopkins.edu/service/informatics/pmap/" target="_blank">JH PMAP</a></td>
        @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="JHPMAP" data-option="2.P.2" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.P.2" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.P.2" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.P.2") && column == "C7" ? "checked" : "") />
            </td>
        }
    </tr>
    <td>2.P.3 <a href="https://ictr.johnshopkins.edu/service/informatics/openspecimen/" target="_blank">JHU OpenSpecimen</a></td>
    @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="JHUOpenSpecimen" data-option="2.P.3" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.P.3" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.P.3" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.P.3") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td>2.P.4 <a href="https://uis.jhu.edu/qualtrics/" target="_blank">JHU Qualtrics</a></td>
    @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="JHUQualtrics" data-option="2.P.4" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.P.4" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.P.4" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.P.4") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td>2.P.5 <a href="https://redcap.jhu.edu/" target="_blank">JHU</a>/<a href="https://www.hopkinsmedicine.org/all-childrens-hospital/academics/research/institute-for-clinical-and-translational-research/data-coordinating-center/database-design-and-data-management" target="_blank">ACH</a> REDCap</td>
    @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="JHUACHREDCap" data-option="2.P.5" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.P.5" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.P.5" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.P.5") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td>2.P.6 <a href="https://researchit.jhu.edu/safe-stor/" target="_blank">SAFESTOR</a></td>
    @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="SAFESTOR" data-option="2.P.6" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.P.6" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.P.6" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.P.6") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td>2.P.7 <a href="https://researchit.jhu.edu/research-hpc/" target="_blank">Discovery HPC</a></td>
     @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="DiscoveryHPC" data-option="2.P.7" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.P.7" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.P.7" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.P.7") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td>2.P.8 <a href="https://researchit.jhu.edu/" target="_blank">Enterprise Network Storage (NAS)</a></td>
     @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="EnterpriseNetworkStorageNAS" data-option="2.P.8" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.P.8" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.P.8" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.P.8") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td>2.P.9 IT@JH RIT-managed System for PHI (e.g. Azure or AWS)</td>
     @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="ITJHRITManagedAzureAWS" data-option="2.P.9" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.P.9" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.P.9" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.P.9") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
    <thead>
    <tr>
        <th>Option</th>
        <th title="Text Protected Health Information" data-column="C1">Text PHI</th>
        <th title="Protected Health Information greater than a Limited Dataset" data-column="C2">PHI > LDS</th>
        <th title="Limited Dataset. See footnote 1 for definition." data-column="C3">LDS</th>
        <th title="Protected Health Information but no Personally Identifiable Information" data-column="C4">PII but no PHI</th>
        <th title="No Protected Health Information or Personally Identifiable Information" data-column="C5">No PHI/PII</th>
        <th title="Summary data in aggregate form" data-column="C6">Aggregate (Counts)</th>
        <th title="This option is not selected or applicable" data-column="C7">Not Used</th>
    </tr>
</thead>                    
            <!-- (J) Justifiable Data Storage Options Section -->
            <tbody>
            <tr>
                <td colspan="8" style="font-weight: bold; text-align: left;">
                    (J) Justifiable Data Storage Options - (Requiring JHED Authenticated Network Access)
                    <a href="https://www.hopkinsmedicine.org/institutional-review-board/guidelines-policies/guidelines/levels-of-identification-of-data" target="_blank">
                    (Click here for more information on "Levels of Identification")
                    </a>
                </td>
            </tr>
<tr>

    <td>2.J.1 JH OneDrive / SharePoint / Teams</td>
     @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="OneDrive" data-option="2.J.1" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.J.1" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.J.1" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.J.1") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td title="For computers NOT managed by IT@JH, see Section R (below)">
        2.J.2 Local Computer <span style="text-decoration: underline; cursor: pointer; color: blue; font-weight: bold;">(both JH owned and IT@JH managed)</span>
    </td>
     @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="LocalComputer" data-option="2.J.2" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.J.2" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.J.2" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.J.2") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
</tbody>
    <thead>
    <tr>
        <th>Option</th>
        <th title="Text Protected Health Information" data-column="C1">Text PHI</th>
        <th title="Protected Health Information greater than a Limited Dataset" data-column="C2">PHI > LDS</th>
        <th title="Limited Dataset. See footnote 1 for definition." data-column="C3">LDS</th>
        <th title="Protected Health Information but no Personally Identifiable Information" data-column="C4">PII but no PHI</th>
        <th title="No Protected Health Information or Personally Identifiable Information" data-column="C5">No PHI/PII</th>
        <th title="Summary data in aggregate form" data-column="C6">Aggregate (Counts)</th>
        <th title="This option is not selected or applicable" data-column="C7">Not Used</th>
    </tr>
</thead>                    
                        <!-- (E) External Data Storage Tools Section -->
                        <tbody>
                        <tr>
    <td colspan="8" style="font-weight: bold; text-align: left;">
        (E) External Data Storage Tools -  
        <a href="https://www.hopkinsmedicine.org/institutional-review-board/guidelines-policies/guidelines/levels-of-identification-of-data" target="_blank">
            (Click here for more information on "Levels of Identification")
        </a>
    </td>
</tr>

<tr class="section-e-option">
    <td>2.E.1 Non-JHU REDCap</td>
      @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="NonJHU_REDCap" data-option="2.E.1" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.E.1" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.E.1" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.E.1") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr class="section-e-option">
    <td>2.E.2 Non-JHU System (e.g., Velos, Medidata RAVE, etc.)</td>
    @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="NonJHUSystem" data-option="2.E.2" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.E.2" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.E.2" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.E.2") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
                    </tbody>
                </table>
            
        </div>

        <!-- Insert the Question between Section E and Section R -->
        <div class="mt-4" id="ora-jhura-question" style="display: none;">
    <p><strong>Is the sharing of data via this external tool included in an agreement handled by 
        <a href="https://ora.jhmi.edu/" target="_blank">ORA</a> or 
        <a href="https://jhura.jhu.edu/" target="_blank">JHURA</a>? 
    (Yes/No)</strong></p>
    <!-- Add radio buttons for Yes/No -->
    <div class="form-check">
        <input class="form-check-input" 
               type="radio" 
               name="DataSharingAgreement" 
               value="Yes" 
               id="DataSharingYes" 
               @(Model.Sharing_Handled_ORA_JHURA == "Yes" ? "checked" : "")>
        <label class="form-check-label" for="DataSharingYes">Yes</label>
    </div>
    <div class="form-check">
        <input class="form-check-input" 
               type="radio" 
               name="DataSharingAgreement" 
               value="No" 
               id="DataSharingNo" 
               @(Model.Sharing_Handled_ORA_JHURA == "No" ? "checked" : "")>
        <label class="form-check-label" for="DataSharingNo">No</label>
    </div>
</div>

        <!-- (R) Data Storage Options Requiring Review Section -->
        <div class="mt-5">
            <table class="table table-striped">
                <thead>
                    <tr>
                       <th>Option</th>
        <th title="Text Protected Health Information" data-column="C1">Text PHI</th>
        <th title="Protected Health Information greater than a Limited Dataset" data-column="C2">PHI > LDS</th>
        <th title="Limited Dataset. See footnote 1 for definition." data-column="C3">LDS</th>
        <th title="Protected Health Information but no Personally Identifiable Information" data-column="C4">PII but no PHI</th>
        <th title="No Protected Health Information or Personally Identifiable Information" data-column="C5">No PHI/PII</th>
        <th title="Summary data in aggregate form" data-column="C6">Aggregate (Counts)</th>
        <th title="This option is not selected or applicable" data-column="C7">Not Used</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
    <td colspan="8" style="font-weight: bold; text-align: left;">
        (R) Data Storage Options Requiring Review -  
        <a href="https://www.hopkinsmedicine.org/institutional-review-board/guidelines-policies/guidelines/levels-of-identification-of-data" 
           target="_blank">
            (Click here for more information on "Levels of Identification")
        </a>
    </td>
</tr>
<tr>
    <td>2.R.1 Department Server (not managed by IT@JH)</td>
    @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="DepartmentServer" data-option="2.R.1" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.R.1" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.R.1" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.R.1") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td>2.R.2 Other computer(s) or Device(s) owned and managed by study team members</td>
     @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="OtherComputers" data-option="2.R.2" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.R.2" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.R.2" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.R.2") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td>2.R.3 USB/Portable Data Storage Device</td>
      @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="USB" data-option="2.R.3" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.R.3" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.R.3" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.R.3") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td>2.R.4 <a href="https://jhpce.jhu.edu/" target="_blank">Joint High Performance Computing Exchange (JHPCE)</a></td>
     @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="JHPCE" data-option="2.R.4" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.R.4" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.R.4" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.R.4") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td>2.R.5 <a href="https://www.arch.jhu.edu/" target="_blank">JHU ARCH (formerly MARCC)</a></td>
    @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="JHUARCH" data-option="2.R.5" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.R.5" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.R.5" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.R.5") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
<tr>
    <td>2.R.6 Other solution not managed by IT@JH, such as cloud storage (Box, Dropbox, etc.)</td>
     @foreach (var column in new[] { "C1", "C2", "C3", "C4", "C5", "C6", "C7" })
        {
            <td>
                <input type="radio" name="OtherSolutions" data-option="2.R.6" data-column="@column" value="@column"
                        @(Model.DataClassifications.Any(dc => dc.Column == column && dc.Option == "2.R.6" && dc.Selected) ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option == "2.R.6" && dc.Column != column) && column == "C7" ? "checked" : "")
                        @(Model.DataClassifications.All(dc => dc.Option != "2.R.6") && column == "C7" ? "checked" : "") />
            </td>
        }
</tr>
                </tbody>
            </table>
        </div>
         
<!-- Modal for Email Input -->
<div class="modal fade" id="emailModal" tabindex="-1" role="dialog" aria-labelledby="emailModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="emailModalLabel">Do you want a copy of the PDF?</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <label for="userEmail">Enter your email address:</label>
        <input type="email" id="userEmail" class="form-control" placeholder="name@example.com">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal" id="skipBtn">Display PDF</button>
        <button type="button" class="btn btn-primary" id="sendEmailBtn">Yes, I'd like a copy</button>
      </div>
      <p id="emailResponse" class="mt-2 text-center"></p> 
    </div>
  </div>
      <!-- Hidden input for risk-level-note 
     <input type="hidden" id="risk-level-note" name="RiskLevelNote" />  
     -->
</div>
    <input type="hidden" id="hidden-risk-level" name="riskLevel" value="">
     <button type="button" class="btn btn-primary" id="generatePdfButton">Generate PDF</button>
     <button type="button" class="btn btn-primary" id="generateTemplatePdf">Download Template PDF</button>
      <button type="submit" class="btn btn-primary"  id="saveButton">Save</button>
       
        <div class="container"><div id="risk-level-note" class="sticky-note">Need to answer more questions to determine risk level.</div>
        
        <div id="version-info" style="font-weight: bold; margin-top: 20px; margin-bottom: 20px;">
        Version: <span id="version-number">1.0</span>
        </div>
</div>
        
    </form>
</div>

<script>
   var globalsection1A = "";
   var globalsection1B = "";
   var globalsection1C = "";
   var globalsection1D = "";
   var globalOraJhuraAnswer = ""; // Declare a global variable for ORA/JHURA
   var globalDataLeavingJHM = ""; // Declare a global variable for data leaving JHM

   
    document.addEventListener("DOMContentLoaded", function () {
        // References to Data Table radio buttons
        const dataTableRadioButtons = document.querySelectorAll('input[type="radio"][data-option]');

        // Section 1 inputs (1A-1D) references using their id's or asp-for
        const section1A = document.querySelectorAll('input[name="InvolvesSensitiveHealthInfo"]');
        const section1B = document.querySelectorAll('input[name="NumberOfPeopleOrRecords"]');
        const section1C = document.querySelectorAll('input[name="HumanDataSharingLevel"]');
        const section1D = document.querySelectorAll('input[name="AllActivitiesCoveredByConsent"]');

        // ORA/JHURA conditional question references
        const oraJhuraYes = document.getElementById('DataSharingYes');
        const oraJhuraNo = document.getElementById('DataSharingNo');
        // Reference to the "Generate PDF" button
        const generatePdfButton = document.getElementById("generatePdfButton");
// Track previously selected radio button
let lastSelectedRadio = null;

// Function to validate Section 1 (1A-1D)
function validateSection1() {
    const is1ASelected = Array.from(section1A).some(radio => radio.checked);
    const is1BSelected = Array.from(section1B).some(radio => radio.checked);
    const is1CSelected = Array.from(section1C).some(radio => radio.checked);
    const is1DSelected = Array.from(section1D).some(radio => radio.checked);

    // Enable the "Generate PDF" button only if all questions (1A-1D) are answered
    generatePdfButton.disabled = !(is1ASelected && is1BSelected && is1CSelected && is1DSelected);
}

// Function to handle radio button clicks and allow deselection
function handleRadioClick(event) {
    if (lastSelectedRadio === event.target) {
        event.target.checked = false; // Deselect if it's the same radio button
        lastSelectedRadio = null; // Reset tracking
    } else {
        lastSelectedRadio = event.target; // Update last selected radio
    }
    validateSection1(); // Revalidate the form after changes
}

// Attach event listeners to Section 1 radio buttons for real-time validation and click handling
[...section1A, ...section1B, ...section1C, ...section1D].forEach(input => {
    input.addEventListener("change", validateSection1);
    input.addEventListener("click", handleRadioClick); // Enable deselection
});

// Perform an initial validation check on page load
validateSection1();


        const form = document.querySelector('form'); // Ensure 'form' is defined
        const inputs = form.querySelectorAll('input, textarea, select, button');
        const isViewOnly = @Json.Serialize(ViewBag.ViewOnly); // Convert Razor variable to JS

         if (isViewOnly) {
            inputs.forEach(input => input.setAttribute('disabled', true));
            document.getElementById("IRBApplicationNumber").removeAttribute("disabled");
            document.getElementById("StudyName").removeAttribute("disabled");
            document.getElementById("PIFirstName").removeAttribute("disabled");
            document.getElementById("PILastName").removeAttribute("disabled");
            document.getElementById("PIJHED").removeAttribute("disabled");
            document.getElementById("PIEmailAddress").removeAttribute("disabled");
            document.getElementById("StudyContactFirstName").removeAttribute("disabled");
            document.getElementById("StudyContactLastName").removeAttribute("disabled");
            document.getElementById("StudyContactJHED").removeAttribute("disabled");
            document.getElementById("StudyContactEmailAddress").removeAttribute("disabled");
            document.getElementById("saveButton").disabled = false;
        }

            
       // Function to collect Section 1 answers and return as individual parameters
function collectSection1Answers() {
    let section1Answers = {};

    // Get the selected answer for 1A
    section1A.forEach(radio => {
        if (radio.checked) {
            // Retrieve the full text of the selected option (e.g., "1.A.1 Yes")
            section1Answers.section1A = radio.parentElement.textContent.trim();
        }
    });

    // Get the selected answer for 1B
    section1B.forEach(radio => {
        if (radio.checked) {
            // Retrieve the full text of the selected option (e.g., "1.B.1 1-499")
            section1Answers.section1B = radio.parentElement.textContent.trim();
        }
    });

    // Get the selected answer for 1C
    section1C.forEach(radio => {
        if (radio.checked) {
            // Retrieve the full text of the selected option (e.g., "1.C.2 LDS")
            section1Answers.section1C = radio.parentElement.textContent.trim();
        }
    });

    // Get the selected answer for 1D
    section1D.forEach(radio => {
        if (radio.checked) {
            // Retrieve the full text of the selected option (e.g., "1.D.2 No")
            section1Answers.section1D = radio.parentElement.textContent.trim();
        }
    });

    return section1Answers;
}

        // Function to collect Data Table radio button selections and return as an array of arrays
        function collectDataTableSelections() {
            let dataTableAnswers = [];

            dataTableRadioButtons.forEach(radio => {
                if (radio.checked) {
                    dataTableAnswers.push([
                        radio.getAttribute('data-option'),
                        radio.getAttribute('data-column')
                    ]);
                }
            });

            return dataTableAnswers; // This will now return an array like [["2.P.7", "C2"], ...]
        }

        // Function to collect ORA/JHURA agreement answer
        function collectOraJhuraAnswer() {
            let oraJhuraAnswer = null;

            if (oraJhuraYes.checked) {
                oraJhuraAnswer = 'Yes';
            } else if (oraJhuraNo.checked) {
                oraJhuraAnswer = 'No';
            }

            globalOraJhuraAnswer = oraJhuraAnswer; // Store the value in a global variable
            return oraJhuraAnswer;
        }


    function collectDataLeavingJHM() {
            let humanDataSharingLevel = null;

            if (HumanDataSharingLevel < 6) {
                humanDataSharingLevel = 'Yes';
            }  else {
                humanDataSharingLevel = 'No';
            }

            globalDataLeavingJHM = humanDataSharingLevel; // Store the value in a global variable
            return humanDataSharingLevel;
        }

        // Main function to send parameters and array to the calculation function
        function updateSelectedOptions() {
            // Collect answers from Section 1 as individual parameters
            const section1Answers = collectSection1Answers();
            globalsection1A = section1Answers.section1A;
            globalsection1B = section1Answers.section1B;
            globalsection1C = section1Answers.section1C;
            globalsection1D = section1Answers.section1D;

            // Collect answers from Data Table as an array of arrays
            const dataTableSelections = collectDataTableSelections();

            // Collect ORA/JHURA agreement as a parameter
            const oraJhuraAnswer = collectOraJhuraAnswer();

            // Log the values for testing (you can see them in the browser's console)
            console.log('Section 1 Answers:', section1Answers);
            console.log('Data Table Selections (array):', dataTableSelections);
            console.log('ORA/JHURA Answer:', oraJhuraAnswer);

            // Send the data to your calculation function
            sendToServer(
                globalsection1A,
                globalsection1B,
                globalsection1C,
                globalsection1D,
                oraJhuraAnswer,
                dataTableSelections
            );
        }

        // Attach event listeners to Section 1 radio buttons
        [...section1A, ...section1B, ...section1C, ...section1D].forEach(radio => {
            radio.addEventListener('change', updateSelectedOptions);
        });

        // Attach event listeners to all Data Table radio buttons
        dataTableRadioButtons.forEach(radio => {
            radio.addEventListener('change', updateSelectedOptions);
        });

        // Attach event listeners to ORA/JHURA radio buttons
        oraJhuraYes.addEventListener('change', updateSelectedOptions);
        oraJhuraNo.addEventListener('change', updateSelectedOptions);

        // Initial check in case there are already selected radios on page load
        updateSelectedOptions();
    });

    async function sendToServer(
        involvesSensitiveHealthInfo,
        numRecords,
        humanDataSharingLevel,
        consentYN,
        oraJhuraAnswer,
        dataTableSelections
    ) {
        try {
            // Convert boolean "true"/"false" to "Y"/"N" for involvesSensitiveHealthInfo, consentYN, ORA question, etc.
            involvesSensitiveHealthInfo = involvesSensitiveHealthInfo === "true" ? "Y" : "N";
            consentYN = consentYN === "true" ? "Y" : "N";
            oraJhuraAnswer = oraJhuraAnswer === "Yes" ? "Y" : "N";  // For ORA question

            // Map 1B: Number of people or records
            switch (numRecords) {
                case "0": // 1-499
                    numRecords = "0";  // 1-499 maps to "0"
                    break;
                case "1": // 500-9,999
                    numRecords = "1";  // 500-9,999 maps to "1"
                    break;
                case "2": // 10,000 or more
                    numRecords = "2";  // 10,000 or more maps to "2"
                    break;
                default:
                    numRecords = "0"; // Default to 1-499 if no input is provided
            }

            // Map 1C: Human data sharing level
            switch (humanDataSharingLevel) {
                case "0": // "Directly identifiable data"
                    humanDataSharingLevel = "0";  // Map to "0"
                    break;
                case "1": // "LDS"
                    humanDataSharingLevel = "1";  // Map to "1"
                    break;
                case "2": // "Person-level data with No PHI or PII"
                    humanDataSharingLevel = "2";  // Map to "2"
                    break;
                case "3": // "Aggregate (counts)"
                    humanDataSharingLevel = "3";  // Map to "3"
                    break;
                case "4": // "Data will not be copied, moved, or shared"
                    humanDataSharingLevel = "4";  // Map to "4"
                    break;
                default:
                    humanDataSharingLevel = "4"; // Default to "Data will not be copied, moved, or shared"
            }

            // Send the collected data
            const dataToSend = {
                tierArray: dataTableSelections,  // 2D array [["2.P.7", "C2"], ...]
                dataLeavingJHM: oraJhuraAnswer,  // "Y" or "N"
                numRecords: numRecords,          // 0, 1, or 2
                consentYN: consentYN,            // "Y" or "N"
                humanDataSharingLevel: humanDataSharingLevel, // 0, 1, 2, 3, or 4
                involvesSensitiveHealthInfo: involvesSensitiveHealthInfo, // "Y" or "N"
                dataSharingAgreement: oraJhuraAnswer  // "Y" or "N"
            };

            console.log("Sending data to server:", dataToSend);

            // Make the API call to the server
            const response = await fetch('/Utility/GetTierLevel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(dataToSend)
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            // Handle the response from the server
            const result = await response.text();
            console.log('Received result from server:', result);
             if (result.startsWith("Tier X") || result.startsWith("Not enough information")) {
                document.getElementById("generatePdfButton").disabled = true;
            } else { 
                document.getElementById("generatePdfButton").disabled = false;
            }
            // Display the calculated tier in the console
            document.getElementById('hidden-risk-level').value = result;
            document.getElementById('risk-level-note').innerText = `Your risk level is: ${result}`;
            //const riskLevelNoteElement = document.getElementById('risk-level-note');
            //riskLevelNoteElement.value = result; 
        } catch (error) {
            console.error('Error while sending data to server:', error);
        }
    }

    // Event listener to trigger risk level calculation when an input changes
    document.querySelectorAll('input').forEach(input => {
        input.addEventListener('change', updateSelectedOptions);
    });

    // Ensure sticky note stays at the bottom of the screen when scrolling
    window.addEventListener('scroll', function () {
        const riskNote = document.getElementById('risk-level-note');
        riskNote.style.position = 'fixed';
        riskNote.style.bottom = '0';
    });
</script>

<script>
    document.getElementById("generateTemplatePdf").addEventListener("click", function () {
        const { jsPDF } = window.jspdf;

        const doc = new jsPDF({ orientation: "portrait" });
        let nextY = 10;

        // Title
        doc.setFontSize(16);
        doc.setTextColor(0, 0, 0);
        doc.text("Risk Tiers Calculator - Template PDF", 10, nextY);

        nextY += 10;

        // Section 1: Data Characteristics and Data Access
        doc.setFontSize(14);
        doc.setFont(undefined, "bold");
        doc.text("Section 1: Data Characteristics and Data Access", 10, nextY);

        nextY += 10;

        // Question 1A
        doc.setFontSize(12);
        doc.text("1A. Involves Sensitive Health Info:", 10, nextY);
        nextY += 6;
        doc.setFontSize(10);
        doc.setFont(undefined, "normal");
        doc.setTextColor(100, 100, 100);
        doc.text("• Yes", 15, nextY);
        nextY += 6;
        doc.text("• No", 15, nextY);

        nextY += 10;

        // Question 1B
        doc.setFontSize(12);
        doc.setFont(undefined, "bold");
        doc.setTextColor(0, 0, 0);
        doc.text("1B. Number of People/Records:", 10, nextY);
        nextY += 6;
        doc.setFontSize(10);
        doc.setFont(undefined, "normal");
        doc.text("• 1-499", 15, nextY);
        nextY += 6;
        doc.text("• 500-9,999", 15, nextY);
        nextY += 6;
        doc.text("• 10,000 or more", 15, nextY);

        nextY += 10;

        // Question 1C
        doc.setFontSize(12);
        doc.setFont(undefined, "bold");
        doc.setTextColor(0, 0, 0);
        doc.text("1C. Human Data Sharing Level:", 10, nextY);
        nextY += 6;
        doc.setFontSize(10);
        doc.setFont(undefined, "normal");
        doc.text("• Directly identifiable data", 15, nextY);
        nextY += 6;
        doc.text("• LDS", 15, nextY);
        nextY += 6;
        doc.text("• Person-level data with No PHI or PII", 15, nextY);
        nextY += 6;
        doc.text("• Aggregate (Counts)", 15, nextY);
        nextY += 6;
        doc.text("• Data will not be copied, moved, or shared", 15, nextY);

        nextY += 10;

        // Question 1D
        doc.setFontSize(12);
        doc.setFont(undefined, "bold");
        doc.text("1D. All Activities Covered By Consent:", 10, nextY);
        nextY += 6;
        doc.setFontSize(10);
        doc.setFont(undefined, "normal");
        doc.text("• Yes", 15, nextY);
        nextY += 6;
        doc.text("• No", 15, nextY);

        nextY += 15;

        // Section 2: Data Storage
        doc.setFontSize(14);
        doc.setFont(undefined, "bold");
        doc.text("Section 2: Data Storage", 10, nextY);

        nextY += 10;

        doc.setFontSize(12);
        doc.text("Preferred Data Storage Options (P):", 10, nextY);
        nextY += 8;

        // Data Table for Section P
        doc.autoTable({
            startY: nextY,
            head: [
                [
                    "Option",
                    "Text PHI",
                    "PHI > LDS",
                    "LDS",
                    "PII But No PHI",
                    "No PHI/PII",
                    "Aggregate\n(Counts)",
                    "Not Used",
                ],
            ],
            body: [
                ["2.P.1 SAFER or SAFE Desktop", "", "", "", "", "", "", ""],
                ["2.P.2 JH PMAP", "", "", "", "", "", "", ""],
                ["2.P.3 JHU OpenSpecimen", "", "", "", "", "", "", ""],
                ["2.P.4 JHU Qualtrics", "", "", "", "", "", "", ""],
                ["2.P.5 JHU/ACH REDCap", "", "", "", "", "", "", ""],
                ["2.P.6 SAFESTOR", "", "", "", "", "", "", ""],
                ["2.P.7 Discovery HPC", "", "", "", "", "", "", ""],
                ["2.P.8 Enterprise Network Storage (NAS)", "", "", "", "", "", "", ""],
                ["2.P.9 IT@JH RIT-managed system for PHI (e.g., Azure or AWS)", "", "", "", "", "", "", ""],
            ],
            columnStyles: {
                0: { cellWidth: 80 }, // Adjust Option column width
            },
        });

        nextY = doc.lastAutoTable.finalY + 20;

        // Start Section J on a new page
        doc.addPage();
        nextY = 10;

        // Section J: Justifiable Data Storage Options
        doc.setFontSize(12);
        doc.setFont(undefined, "bold");
        doc.text("Justifiable Data Storage Options (J):", 10, nextY);
        nextY += 8;

        doc.autoTable({
            startY: nextY,
            head: [
                [
                    "Option",
                    "Text PHI",
                    "PHI > LDS",
                    "LDS",
                    "PII But No PHI",
                    "No PHI/PII",
                    "Aggregate\n(Counts)",
                    "Not Used",
                ],
            ],
            body: [
                ["2.J.1 JH OneDrive / SharePoint / Teams", "", "", "", "", "", "", ""],
                ["2.J.2 Local Computer (JH-owned and IT@JH managed)", "", "", "", "", "", "", ""],
            ],
            columnStyles: {
                0: { cellWidth: 80 }, // Adjust Option column width
            },
        });

        nextY = doc.lastAutoTable.finalY + 20;

        // Section E: External Data Storage Tools
        doc.setFontSize(12);
        doc.setFont(undefined, "bold");
        doc.text("External Data Storage Tools (E):", 10, nextY);
        nextY += 8;

        doc.autoTable({
            startY: nextY,
            head: [
                [
                    "Option",
                    "Text PHI",
                    "PHI > LDS",
                    "LDS",
                    "PII But No PHI",
                    "No PHI/PII",
                    "Aggregate\n(Counts)",
                    "Not Used",
                ],
            ],
            body: [
                ["2.E.1 Non-JHU REDCap", "", "", "", "", "", "", ""],
                ["2.E.2 Non-JHU System (e.g., Velos, Medidata RAVE, etc.)", "", "", "", "", "", "", ""],
            ],
            columnStyles: {
                0: { cellWidth: 80 }, // Adjust Option column width
            },
        });

        nextY = doc.lastAutoTable.finalY + 20;

        // ORA Question
        doc.setFont(undefined, "bold");
        doc.text("Is the sharing of data via this external tool included in an agreement", 10, nextY);
        nextY += 6;
        doc.text("handled by ORA or JHURA? (Yes/No)", 10, nextY);
        nextY += 8;
        doc.setFontSize(10);
        doc.setFont(undefined, "normal");
        doc.text("• Yes", 15, nextY);
        nextY += 6;
        doc.text("• No", 15, nextY);

        nextY += 15;

        // Section R: Data Storage Options Requiring Review
       doc.setFontSize(12);
doc.setFont(undefined, "bold");
doc.text("Data Storage Options Requiring Review (R):", 10, nextY);
nextY += 8;

doc.autoTable({
    startY: nextY,
    head: [
        [
            "Option",
            "Text PHI",
            "PHI > LDS",
            "LDS",
            "PII But No PHI",
            "No PHI/PII",
            "Aggregate\n(Counts)",
            "Not Used",
        ],
    ],
    body: [
        ["2.R.1 Department Server (not managed by IT@JH)", "", "", "", "", "", "", ""],
        ["2.R.2 Other computer(s) or Device(s) owned and managed by study team members", "", "", "", "", "", "", ""],
        ["2.R.3 USB/Portable Data Storage Device", "", "", "", "", "", "", ""],
        ["2.R.4 Joint High Performance Computing Exchange (JHPCE)", "", "", "", "", "", "", ""],
        ["2.R.5 JHU ARCH (formerly MARCC)", "", "", "", "", "", "", ""],
        ["2.R.6 Other solution not managed by IT@JH, such as cloud storage (Box, Dropbox, etc.)", "", "", "", "", "", "", ""],
    ],
            columnStyles: {
                0: { cellWidth: 80 }, // Adjust Option column width
            },
        });

nextY = doc.lastAutoTable.finalY + 20;

        // Save and open in a new window
        const pdfBlob = doc.output("blob");
        const blobUrl = URL.createObjectURL(pdfBlob);
        const newWindow = window.open();
        newWindow.location = blobUrl;
    });
</script>


<script>
document.addEventListener("DOMContentLoaded", function () {
    const versionNumber = "Version 1.0"; // Define the version number once here

    // Display version number on the webpage
    document.getElementById("version-number").textContent = versionNumber;

    const generatePdfButton = document.getElementById("generatePdfButton");
    const sendEmailBtn = document.getElementById("sendEmailBtn");
    const skipBtn = document.getElementById("skipBtn");
    const userEmailInput = document.getElementById("userEmail");

    // Define the radio button collections for Section 1
    const section1A = document.querySelectorAll('input[name="InvolvesSensitiveHealthInfo"]');
    const section1B = document.querySelectorAll('input[name="NumberOfPeopleOrRecords"]');
    const section1C = document.querySelectorAll('input[name="HumanDataSharingLevel"]');
    const section1D = document.querySelectorAll('input[name="AllActivitiesCoveredByConsent"]');

    function collectSection1Answers() {
    let section1Answers = {};

    // 1A
    const selected1A = Array.from(section1A).find(radio => radio.checked);
    section1Answers.section1A = {
        value: selected1A ? selected1A.value : "", // Default to empty string if not selected
        label: selected1A ? selected1A.closest('.form-check').querySelector('.radio-number').textContent.trim() : "1.A"
    };

    // 1B
    const selected1B = Array.from(section1B).find(radio => radio.checked);
    section1Answers.section1B = {
        value: selected1B ? selected1B.value : "",
        label: selected1B ? selected1B.closest('.form-check').querySelector('.radio-number').textContent.trim() : "1.B"
    };

    // 1C
    const selected1C = Array.from(section1C).find(radio => radio.checked);
    section1Answers.section1C = {
        value: selected1C ? selected1C.value : "",
        label: selected1C ? selected1C.closest('.form-check').querySelector('.radio-number').textContent.trim() : "1.C"
    };

    // 1D
    const selected1D = Array.from(section1D).find(radio => radio.checked);
    section1Answers.section1D = {
        value: selected1D ? selected1D.value : "",
        label: selected1D ? selected1D.closest('.form-check').querySelector('.radio-number').textContent.trim() : "1.D"
    };

    console.log("Collected Section 1 Answers:", section1Answers); // Debug
    return section1Answers;
}

    // Function to fetch and populate user's email
    async function fetchUserEmail() {
        try {
            const response = await fetch('/Home/GetUserEmail'); // Call API
            const data = await response.json(); // Parse JSON response
            
            if (data.success && data.email) {
                userEmailInput.value = data.email; // Populate email input
            }
        } catch (error) {
            console.error("Error fetching user email:", error);
        }
    }

    // Handle the case where the user skips the email
    skipBtn.addEventListener("click", function () {
        const doc = generatePdf();
        const pdfBlob = doc.output("blob");
        const blobUrl = URL.createObjectURL(pdfBlob);
        window.open(blobUrl, "_blank");
        $("#emailModal").modal("hide");
    });

    sendEmailBtn.addEventListener("click", function () {
        const email = userEmailInput.value;
        if (email) {
            console.log("Send PDF to email:", email);
            alert("A copy of the PDF will be sent to " + email);
            $("#emailModal").modal("hide");
        } else {
            alert("Please enter a valid email address.");
        }
    });

    generatePdfButton.addEventListener("click", function () {
        fetchUserEmail(); // Fetch email before showing modal
        $("#emailModal").modal("show");
    });

    // PDF Generation function
    function generatePdf() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF({ orientation: 'landscape' }); // Set to landscape mode
        const tableData = collectDataTableSelections();

        const rtcCompletionDate = document.getElementById("RTCCompletionDate")?.value || "N/A";
        const irbApplicationNumber = document.getElementById("IRBApplicationNumber")?.value || "N/A";
        const piFirstName = document.getElementById("PIFirstName")?.value || "N/A";
        const piLastName = document.getElementById("PILastName")?.value || "N/A";
        const piJHED = document.getElementById("PIJHED")?.value || "N/A";
        const piEmailAddress = document.getElementById("PIEmailAddress")?.value || "N/A";
        const studyName = document.getElementById("StudyName")?.value || "N/A";
        const studyContactFirstName = document.getElementById("StudyContactFirstName")?.value || "N/A";
        const studyContactLastName = document.getElementById("StudyContactLastName")?.value || "N/A";
        const studyContactJHED = document.getElementById("StudyContactJHED")?.value || "N/A";
        const studyContactEmailAddress = document.getElementById("StudyContactEmailAddress")?.value || "N/A";

        // Start PDF content
        doc.setFontSize(16);
        doc.text("Risk Tiers Calculator - PDF Summary", 10, 10);

        // Initialize vertical position tracker
        let nextY = 20; // Start after the title

        // RTC and IRB Application Information
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0); // Black for labels
        doc.text("RTC Completion Date (yyyy-mm-dd): ", 10, nextY);
        doc.setTextColor(0, 102, 204); // Blue for user data
        doc.text(rtcCompletionDate, 85, nextY);

        doc.setTextColor(0, 0, 0);
        doc.text("IRB Application Number: ", 10, nextY + 10);
        doc.setTextColor(0, 102, 204);
        doc.text(irbApplicationNumber, 70, nextY + 10);

        // Define the maximum width for the Study Name text
        const maxWidth = 80; // Adjust this value to control the wrapping width

        // Split the Study Name text to fit within the defined width
        const wrappedStudyName = doc.splitTextToSize(studyName, maxWidth);

        // Set text color and render the label
        doc.setTextColor(0, 0, 0);
        doc.text("Study Name: ", 150, nextY + 10); // Align Study Name to the right of IRB Application Number

        // Set text color for the Study Name and render the wrapped text
        doc.setTextColor(0, 102, 204);
        wrappedStudyName.forEach((line, index) => {
            doc.text(line, 210, nextY + 10 + (index * 6)); // Adjust line spacing as needed (6 is the line height)
        });

        // Adjust nextY to account for the height of the wrapped text
        nextY += 10 + (wrappedStudyName.length * 6);
        // Increment nextY for the next section
        nextY += 20;

        // PI and Study Contact Information (side by side)
        doc.setTextColor(0, 0, 0);
        doc.text("PI First Name: ", 10, nextY);
        doc.setTextColor(0, 102, 204);
        doc.text(piFirstName, 70, nextY);

        doc.setTextColor(0, 0, 0);
        doc.text("Study Contact First Name: ", 150, nextY); // Align Study Contact First Name to the right
        doc.setTextColor(0, 102, 204);
        doc.text(studyContactFirstName, 210, nextY);

        nextY += 10; // Increment Y for the next line
        doc.setTextColor(0, 0, 0);
        doc.text("PI Last Name: ", 10, nextY);
        doc.setTextColor(0, 102, 204);
        doc.text(piLastName, 70, nextY);

        doc.setTextColor(0, 0, 0);
        doc.text("Study Contact Last Name: ", 150, nextY);
        doc.setTextColor(0, 102, 204);
        doc.text(studyContactLastName, 210, nextY);

        nextY += 10; // Increment Y for the next line
        doc.setTextColor(0, 0, 0);
        doc.text("PI JHED: ", 10, nextY);
        doc.setTextColor(0, 102, 204);
        doc.text(piJHED, 70, nextY);

        doc.setTextColor(0, 0, 0);
        doc.text("Study Contact JHED: ", 150, nextY);
        doc.setTextColor(0, 102, 204);
        doc.text(studyContactJHED, 210, nextY);

        nextY += 10; // Increment Y for the next line
        doc.setTextColor(0, 0, 0);
        doc.text("PI Email Address: ", 10, nextY);
        doc.setTextColor(0, 102, 204);
        doc.text(piEmailAddress, 70, nextY);

        doc.setTextColor(0, 0, 0);
        doc.text("Study Contact Email Address: ", 150, nextY);
        doc.setTextColor(0, 102, 204);
        doc.text(studyContactEmailAddress, 210, nextY);

// Section 1: Data Characteristics and Data Access
nextY += 15; // Small spacing before Section 1
doc.setFontSize(14);
doc.setTextColor(0, 0, 0); // Black for the section header
doc.text("Section 1: Data Characteristics and Data Access", 10, nextY);

const section1Answers = collectSection1Answers();

nextY += 10;
doc.setFontSize(12);

// Define the X-coordinates for the question labels and answers
const labelX = 10; // Starting position for the question labels (e.g., "1A. Involves...")
const numberLabelX = 120; // Starting position for the number labels (e.g., "1.A.1")
const answerX = 138; // Starting position for the answers (e.g., "Yes")

// 1A. Involves Sensitive Health Info
doc.setTextColor(0, 0, 0);
doc.text("1A. Involves Sensitive Health Info: ", labelX, nextY);
doc.setTextColor(0, 102, 204);
const label1A = section1Answers.section1A?.label || "1.A"; // Fallback if undefined
const answer1A = section1Answers.section1A?.value ? (section1Answers.section1A.value === "true" ? "Yes" : "No") : "N/A";
doc.text(label1A, numberLabelX, nextY); // Display the label (e.g., "1.A.1")
doc.text(answer1A, answerX, nextY); // Display the answer (e.g., "Yes") on the same line
nextY += 10;

// 1B. Number of People/Records
doc.setTextColor(0, 0, 0);
doc.text("1B. Number of People/Records: ", labelX, nextY);
doc.setTextColor(0, 102, 204);
const label1B = section1Answers.section1B?.label || "1.B";
const answer1B = section1Answers.section1B?.value ? ({
    "0": "1-499",
    "1": "500-9,999",
    "2": "10,000 or more"
}[section1Answers.section1B.value] || "Unknown") : "N/A";
doc.text(label1B, numberLabelX, nextY);
doc.text(answer1B, answerX, nextY);
nextY += 10;

// 1C. Human Data Sharing Level
doc.setTextColor(0, 0, 0);
doc.text("1C. Human Data Sharing Level: ", labelX, nextY);
doc.setTextColor(0, 102, 204);
const label1C = section1Answers.section1C?.label || "1.C";
const answer1C = section1Answers.section1C?.value ? ({
    "0": "Directly identifiable data",
    "1": "LDS",
    "2": "Person-level data with No PHI or PII",
    "3": "Aggregate (counts)",
    "4": "Data will not be copied, moved, or shared"
}[section1Answers.section1C.value] || "Unknown") : "N/A";
doc.text(label1C, numberLabelX, nextY);
doc.text(answer1C, answerX, nextY);
nextY += 10;

// 1D. All Activities Covered By Consent
doc.setTextColor(0, 0, 0);
doc.text("1D. All Activities Covered By Consent: ", labelX, nextY);
doc.setTextColor(0, 102, 204);
const label1D = section1Answers.section1D?.label || "1.D";
const answer1D = section1Answers.section1D?.value ? (section1Answers.section1D.value === "true" ? "Yes" : "No") : "N/A";
doc.text(label1D, numberLabelX, nextY);
doc.text(answer1D, answerX, nextY);
nextY += 20; // Extra spacing before Section 2

        // Start new page for Section 2
        doc.addPage();
        doc.setTextColor(0, 0, 0);
        doc.setFontSize(14);
        doc.text("Section 2: Data Storage", 10, 10);

        // Add the Data Table
        doc.autoTable({
            head: [["Option", "Text PHI", "PHI > LDS", "LDS", "PII But No PHI", "No PHI/PII", "Aggregate (Counts)", "Not Used"]],
            body: tableData.map((row) => [
                row.optionWithDescription,  // Include the option with its description
                row.columns.includes("C1") ? "x" : "",
                row.columns.includes("C2") ? "x" : "",
                row.columns.includes("C3") ? "x" : "",
                row.columns.includes("C4") ? "x" : "",
                row.columns.includes("C5") ? "x" : "",
                row.columns.includes("C6") ? "x" : "",
            ]),
            startY: 20,
        });

        // Check if all Section E rows are "Not Used"
        const sectionERadios = document.querySelectorAll('input[data-option^="2.E."]');
        let isSectionEAllNotUsed = true;
        sectionERadios.forEach(radio => {
            if (radio.checked && radio.getAttribute("data-column") !== "C7") {
                isSectionEAllNotUsed = false;
            }
        });

        // Add the ORA/JHURA question and risk level only if Section E is not all "Not Used"
        if (!isSectionEAllNotUsed) {
            doc.setTextColor(0, 0, 0);  // Set black for label
            doc.text("Is data sharing covered by an ORA/JHURA agreement: ", 10, doc.lastAutoTable.finalY + 10);
            doc.setTextColor(0, 102, 204);  // Set light blue for the user response
            const dataSharingAgreement = document.querySelector('input[name="DataSharingAgreement"]:checked')?.nextElementSibling.textContent || "N/A";
            doc.text(dataSharingAgreement, 140, doc.lastAutoTable.finalY + 10); // User response in light blue
        }

        // Add Risk Level below ORA/JHURA
        doc.setTextColor(0, 0, 0);
        doc.text("Risk Level: ", 10, doc.lastAutoTable.finalY + 20);
        doc.setTextColor(0, 102, 204);
        const riskLevel = document.getElementById('risk-level-note').innerText || "Risk level not calculated";
        doc.text(riskLevel, 60, doc.lastAutoTable.finalY + 20);  // Response in light blue

        // Add version number below Risk Level
        doc.setTextColor(0, 0, 0);  // Back to black for the version number
        doc.text("Version: " + versionNumber, 10, doc.lastAutoTable.finalY + 30);  // Version number at the bottom

        return doc;
    }

    function collectDataTableSelections() {
        const dataTableSelections = [];
        const dataTableRadioButtons = document.querySelectorAll('input[type="radio"][data-option]');

        dataTableRadioButtons.forEach((radio) => {
            if (radio.checked && radio.getAttribute("data-column") !== "C7") { // Exclude "Not Used" (C7)
                const option = radio.getAttribute("data-option"); // Get the option number (e.g., "2.P.1")
                const column = radio.getAttribute("data-column"); // Get the column where the radio button was selected

                // Get the row's first cell text and remove the option number prefix
                let optionDescriptionElement = radio.closest("tr").querySelector("td");
                let optionDescription = optionDescriptionElement ? optionDescriptionElement.textContent.trim() : "";

                // Remove the leading option number if it repeats (e.g., "2.P.1 2.P.1 SAFER or SAFE Desktop")
                if (optionDescription.startsWith(option)) {
                    optionDescription = optionDescription.replace(option, "").trim();
                }

                let existing = dataTableSelections.find((entry) => entry.option === option);
                if (existing) {
                    existing.columns.push(column);
                } else {
                    dataTableSelections.push({
                        option: option,
                        columns: [column],
                        optionWithDescription: `${option} ${optionDescription}`.trim(), // Ensure clean formatting
                    });
                }
            }
        });

        return dataTableSelections;
    }
});
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const dataTableRadios = document.querySelectorAll('input[type="radio"][data-option]');
        const question = document.getElementById("ora-jhura-question");

        // Function to check if any radio button in Section E is selected (excluding "Not Used" column)
        function checkSectionE() {
            const sectionERadios = document.querySelectorAll('input[data-option^="2.E."]');
            let isAnySelected = false;

            sectionERadios.forEach(radio => {
                if (radio.checked && radio.getAttribute("data-column") !== "C7") {
                    isAnySelected = true;
                }
            });

            // Show or hide the ORA/JHURA question based on the selection in Section E
            question.style.display = isAnySelected ? "block" : "none";
        }

        // Event listener for Data Table radios (Section 2 only)
        dataTableRadios.forEach(radio => {
            radio.addEventListener('click', function (event) {
                const rowRadios = document.querySelectorAll(`input[data-option="${this.getAttribute('data-option')}"]`);
                const notUsedRadio = [...rowRadios].find(r => r.getAttribute('data-column') === 'C7'); // Find "Not Used" column radio

                // If clicked twice, move to "Not Used"
                if (this.dataset.wasChecked === "true" && this.getAttribute('data-column') !== 'C7') {
                    event.preventDefault(); // Prevent direct deselection
                    notUsedRadio.checked = true;
                    notUsedRadio.dataset.wasChecked = "true";
                } else {
                    // Normal selection: Ensure previous tracking is reset
                    rowRadios.forEach(r => r.dataset.wasChecked = "false");
                    this.dataset.wasChecked = "true";
                }

                // Reset tracking after switching to "Not Used"
                rowRadios.forEach(r => r.dataset.wasChecked = "false");
                this.dataset.wasChecked = "true";

                // Ensure users can select the same answer after moving to "Not Used"
                rowRadios.forEach(r => {
                    r.addEventListener("click", function () {
                        r.dataset.wasChecked = "false";
                    });
                });

                // If it's part of Section E, check whether to show the ORA/JHURA question
                if (this.getAttribute("data-option")?.startsWith("2.E.")) {
                    checkSectionE();
                }

                // Ensure change event fires immediately after a click
                this.dispatchEvent(new Event("change", { bubbles: true }));
            });
        });

        // Initial check in case Section E radios are already selected on page load
        checkSectionE();
    });
</script>

 <script>
        
        // Example event listener to trigger risk level calculation when an input changes
        document.querySelectorAll('input').forEach(input => {
            input.addEventListener('change', updateRiskLevel);
        });

        // Ensure sticky note stays at the bottom of the screen when scrolling
        window.addEventListener('scroll', function () {
            const riskNote = document.getElementById('risk-level-note');
            riskNote.style.position = 'fixed';
            riskNote.style.bottom = '0';
        });
</script>
<script>
   document.addEventListener("DOMContentLoaded", function () {
    const sendEmailBtn = document.getElementById("sendEmailBtn");
    const userEmailInput = document.getElementById("userEmail");
    const responseText = document.getElementById("emailResponse");
    let generatedPdfBase64 = ""; // Store the generated PDF Base64

    if (!sendEmailBtn || !userEmailInput || !responseText) {
        console.error("❌ Missing elements in the DOM. Ensure 'emailResponse' exists.");
        return;
    }

    // Function to generate the PDF and store it in Base64 format
    function generatePdf() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF({ orientation: "landscape" });

        doc.setFontSize(16);
        doc.text("Risk Tiers Calculator - PDF Summary", 10, 10);
        doc.setFontSize(12);
        doc.text("This is an automatically generated PDF.", 10, 20);

        // Convert PDF to Blob and Base64
        const pdfBlob = doc.output("blob");

        blobToBase64(pdfBlob).then(base64String => {
            generatedPdfBase64 = base64String; // Store Base64 version of PDF
        });

        return doc;
    }

    // Generate and display the PDF when "Skip" is clicked
    document.getElementById("skipBtn").addEventListener("click", function () {
        const doc = generatePdf();
        const pdfBlob = doc.output("blob");
        const blobUrl = URL.createObjectURL(pdfBlob);
        window.open(blobUrl, "_blank");
        $("#emailModal").modal("hide");
    });

    // Send email with the already generated PDF
    sendEmailBtn.addEventListener("click", async function () {
        const recipientEmail = userEmailInput.value.trim();

        if (!recipientEmail) {
            alert("Please enter a valid email address.");
            return;
        }

        if (!generatedPdfBase64) {
            responseText.innerText = "❌ No PDF available. Generate the PDF first.";
            return;
        }

        responseText.innerText = "⏳ Sending email...";

        // Prepare email request
        const emailData = {
            recipientEmail: recipientEmail,
            subject: "Your Requested PDF Document",
            body: "Please find the attached PDF.",
            attachmentBase64: generatedPdfBase64,  // Attach generated PDF
            attachmentFilename: "GeneratedDocument.pdf"
        };

        try {
            const response = await fetch("/api/email/send", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(emailData),
            });

            if (!response.ok) throw new Error("Failed to send email.");

            responseText.innerText = "✅ Email sent successfully with the PDF attachment.";
        } catch (error) {
            responseText.innerText = "❌ Error sending email. Please try again.";
            console.error("Email sending error:", error);
        }
    });

    // Helper function: Convert Blob to Base64
    function blobToBase64(blob) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result.split(",")[1]); // Remove "data:application/pdf;base64,"
            reader.onerror = reject;
            reader.readAsDataURL(blob);
        });
    }

    // Generate the PDF when modal opens (so it's available before sending)
    document.getElementById("generatePdfButton").addEventListener("click", function () {
        generatePdf();
        $("#emailModal").modal("show");
    });
});

</script>

<!-- Load jQuery first -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>

<!-- Load Bootstrap JS -->

<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>


</body>
</html>